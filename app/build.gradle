plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlinx.serialization)
    alias(libs.plugins.ksp)
    alias(libs.plugins.google.hilt)
}

def githubVersionCode = System.getenv("GITHUB_RUN_NUMBER") as Integer ?: 1

android {
    namespace 'ua.graviton.isida'

    defaultConfig {
        applicationId "ua.graviton.isida"

        versionCode githubVersionCode
        versionName gitDescribe()

        archivesBaseName = "app-v$versionName"

        manifestPlaceholders = [
                notification_channel_General: "General"
        ]

        buildConfigField "String", "NOTIFICATION_CHANNEL_ID_GENERAL", "\"$manifestPlaceholders.notification_channel_General\""
    }

    buildTypes {
        debug {
            minifyEnabled false
            versionNameSuffix "-DEBUG"
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        // For creation of default methods in interfaces
        freeCompilerArgs += "-Xjvm-default=all"
        freeCompilerArgs += [
                '-opt-in=kotlin.RequiresOptIn',
                '-opt-in=kotlin.ExperimentalUnsignedTypes',
                '-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi',
                '-opt-in=androidx.compose.animation.ExperimentalAnimationApi',
                '-opt-in=androidx.compose.ui.ExperimentalComposeUiApi',
                '-opt-in=androidx.compose.foundation.ExperimentalFoundationApi',
        ]
    }

    buildFeatures { compose true }
    composeOptions { kotlinCompilerExtensionVersion libs.versions.composecompiler.get() }
    packagingOptions { resources { excludes += '/META-INF/{AL2.0,LGPL2.1}' } }
}

dependencies {
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.kotlinx.coroutines.android)

    // Compose
    implementation(libs.bundles.androidx.compose)

    // Accompanist
    implementation(libs.bundles.accompanist)

    // Compose destinations
    implementation(libs.compose.destinations.core)
    ksp(libs.compose.destinations.ksp)

    // lifecycle
    implementation(libs.bundles.lifecycle)

    implementation(libs.androidx.navigation)

    def room = "2.5.0-rc01"
    implementation "androidx.room:room-runtime:${room}"
    ksp "androidx.room:room-compiler:${room}"
    implementation "androidx.room:room-ktx:${room}"

    implementation(libs.androidx.core)
    implementation "androidx.annotation:annotation:1.6.0"
    implementation(libs.androidx.activity.compose)
    implementation 'androidx.core:core-splashscreen:1.0.1'
    implementation "androidx.appcompat:appcompat:1.6.0"
    implementation(libs.androidx.preference)

    def data_store_version = "1.0.0"
    implementation "androidx.datastore:datastore-preferences:$data_store_version"
    implementation "androidx.datastore:datastore-core:$data_store_version"

    implementation(libs.google.hilt.android)
    kapt(libs.google.hilt.compiler)
    implementation(libs.androidx.hilt.navigation)

    implementation 'com.google.android.gms:play-services-location:21.0.1'

    implementation(libs.timber)
}

kapt { correctErrorTypes = true }

ksp {
    arg("compose-destinations.generateNavGraphs", "false")
    arg('room.schemaLocation', "$projectDir/schemas")
    arg('room.incremental', "true")
    arg('room.expandProjection', "true")
}

String gitDescribe() {
    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "git", "describe", "--tags", "--always"
        standardOutput = hashStdOut
    }
    return hashStdOut.toString().split("\n").first().trim()
}

String gitLatestTag() {
    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "git", "tag", "--sort=-committerdate"
        standardOutput = hashStdOut
    }
    return hashStdOut.toString().split("\n").first().trim()
}

String gitNotes(String latestTag) {
    def source = (latestTag) ? "$latestTag..HEAD" : "--max-count=20"

    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "git", "log", "--pretty=* %s (%an) [%h]", source
        standardOutput = hashStdOut
    }
    return hashStdOut.toString().trim()
}